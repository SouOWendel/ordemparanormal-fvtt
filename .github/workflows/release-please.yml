# Referências para este release-please
# https://github.com/foundryvtt/dnd5e/blob/master/.github/workflows/release.yml
# https://github.com/sun-dragon-cult/github-workflows/blob/main/.github/workflows/release-please.yml
# https://github.com/google-github-actions/release-please-action/blob/v3.7.11/.github/workflows/release-please.yaml

on:
    push:
        branches:
            - main

permissions:
    contents: write
    pull-requests: write

name: release-please

jobs:
    release-please:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            # Set up our some variables for future use
            # Adapted from https://github.community/t/how-to-get-just-the-tag-name/16241/7
            # Tag name: ${{ steps.get_vars.outputs.TAG_NAME }}
            # Zip name: ${{ steps.get_vars.outputs.ZIP_NAME }}
            # Expected Release Download URL: ${{ steps.get_vars.outputs.RELEASE_DOWNLOAD_URL }}
            # Expected Release system.json URL: ${{ steps.get_vars.outputs.RELEASE_INSTALL_URL }}
            # Stringified system.json contents: ${{ steps.get_vars.outputs.SYSTEM_JSON }}
            - name: Set up variables
              id: get_vars
              run: |
                TAG=${GITHUB_REF/refs\/tags\//}
                echo ::set-output name=TAG_NAME::$TAG
                echo ::set-output name=ZIP_NAME::ordem_fvtt_system.zip
                echo ::set-output name=RELEASE_DOWNLOAD_URL::https://github.com/${{github.repository}}/releases/download/$TAG/ordem_fvtt_system.zip
                echo ::set-output name=RELEASE_INSTALL_URL::https://github.com/${{github.repository}}/releases/download/$TAG/system.json
                JSON=$(cat ./system.json)
                echo ::set-output name=SYSTEM_JSON::${JSON//'%'/'%25'}
            
            # Run some tests to make sure our `system.json` is correct
            # Exit before setting up node if not
            - name: Verify correct naming
              env:
                TAG_NAME: ${{ steps.get_vars.outputs.TAG_NAME }}
                RELEASE_DOWNLOAD: ${{steps.get_vars.outputs.RELEASE_DOWNLOAD_URL}}
                # Extract version and download url from system.json
                # https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
                PACKAGE_VERSION: ${{fromJSON(steps.get_vars.outputs.SYSTEM_JSON).version}}
                PACKAGE_DOWNLOAD: ${{fromJSON(steps.get_vars.outputs.SYSTEM_JSON).download}}
              run: |
                # Validate that the tag being released matches the package version.
                if [[ ! $TAG_NAME == $PACKAGE_VERSION ]]; then
                    echo "The system.json version does not match tag name."
                    echo "system.json: $PACKAGE_VERSION"
                    echo "tag name: $TAG_NAME"
                    echo "Please fix this and push the tag again."
                    exit 1
                fi

                # Validate that the package download url matches the release asset that will be created.
                if [[ ! $RELEASE_DOWNLOAD == $PACKAGE_DOWNLOAD ]]; then
                    echo "The system.json download url does not match the created release asset url."
                    echo "system.json: $PACKAGE_DOWNLOAD"
                    echo "release asset url: $RELEASE_DOWNLOAD"
                    echo "Please fix this and push the tag again."
                    exit 1
                fi

            # Criar uma release e um PR (pull-request) com base no manifest (comando e arquivo).
            # O comando manifest faz uma PR utilizando as configurações do release-please-config.json
            # se forem validas. Dentro deste arquivo, há a configuração do system.json.
            - uses: google-github-actions/release-please-action@v3.7.11
              id: release
              with:
                  command: manifest
                  token: ${{secrets.GITHUB_TOKEN}}
                  release-type: node

            # Create a zip file with all files required by the module to add to the release
            - run: zip ordem_fvtt_system.zip -r css lang module templates system.json template.json LICENSE.txt README.md

            # Adiciona o arquivo System.json as releases do sistema.
            - name: Upload Release Artifact
              if: ${{ steps.release.outputs.release_created }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release upload ${{ steps.release.outputs.tag_name }} ./system.json
                  gh release upload ${{ steps.release.outputs.tag_name }} ./ordem_fvtt-$TAG.zip
